import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
    users: defineTable({
        clerkUserId: v.string(),
        email: v.string(),
        name: v.string(),
        avatar: v.optional(v.string()),
        role: v.union(v.literal("admin"), v.literal("manager"), v.literal("user")),
        createdAt: v.optional(v.number()),
        updatedAt: v.optional(v.number()),
    }).index("by_clerk_id", ["clerkUserId"]),

    // master data

    customers: defineTable({
        customerId: v.string(),
        customerName: v.string(),
        phone: v.string(),
        email: v.string(),
        gstin: v.optional(v.string()),
        pan: v.optional(v.string()),
        customerType: v.union(v.literal("Domestic"), v.literal("Export")),
        groupId: v.id("customerGroups"),
        gradeId: v.optional(v.id("customerGrades")),
        creditLimit: v.optional(v.number()),
        paymentTermsId: v.id("paymentTerms"),
        salesPersonId: v.id("salesPersons"),
        status: v.union(v.literal("Active"), v.literal("Inactive")),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_customer_id", ["customerId"]).searchIndex("search_name", { searchField: "customerName" }),

    customerLocations: defineTable({
        customerId: v.id("customers"),
        locationType: v.string(),
        addressLine1: v.string(),
        addressLine2: v.optional(v.string()),
        city: v.string(),
        state: v.string(),
        pin: v.string(),
        country: v.string(),
        isDefault: v.boolean(),
        status: v.union(v.literal("active"), v.literal("inactive")),
    }).index("by_customer_location", ["customerId", "locationType"]),

    customerContacts: defineTable({
        customerId: v.id("customers"),
        name: v.string(),
        designation: v.string(),
        phone: v.string(),
        email: v.string(),
        level: v.string(),
    }).index("by_customer_contact", ["customerId", "name"]),

    customerGroups: defineTable({
        groupId: v.string(),
        groupName: v.string(),
        description: v.optional(v.string()),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_group_id", ["groupId"]),

    customerGrades: defineTable({
        gradeId: v.string(),
        gradeName: v.string(),
        description: v.optional(v.string()),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_grade_id", ["gradeId"]),

    IndustryTypes: defineTable({
        industryTypeId: v.string(),
        name: v.string(),
        revenueContribution: v.optional(v.number()),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_industry_type_id", ["industryTypeId"]),

    salesPersons: defineTable({
        salesPersonId: v.string(),
        name: v.string(),
        email: v.string(),
        role: v.union(v.literal("sales"), v.literal("manager")),
        phone: v.string(),
        region: v.string(),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_sales_person_id", ["salesPersonId"]),

    paymentTerms: defineTable({
        paymentTermsId: v.string(),
        termsName: v.string(),
        description: v.optional(v.string()),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_payment_terms_id", ["paymentTermsId"]),

    deliveryTerms: defineTable({
        deliveryTermsId: v.string(),
        name: v.string(),
        description: v.optional(v.string()),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_delivery_terms_id", ["deliveryTermsId"]),

    warrantyTerms: defineTable({
        warrantyTermsId: v.string(),
        name: v.string(),
        description: v.optional(v.string()),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_warranty_terms_id", ["warrantyTermsId"]),

    Items: defineTable({
        itemId: v.string(),
        name: v.string(),
        itemType: v.union(v.literal("product"), v.literal("service")),
        uom: v.string(),
        taxGroup: v.optional(v.string()),
        hsnCode: v.optional(v.string()),
        standardCost: v.number(),
        salesPrice: v.number(),
        currentStockQty: v.optional(v.number()),
        reorderLevel: v.optional(v.number()),
        description: v.optional(v.string()),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_item_id", ["itemId"]),

    // Transactions

    enquiries: defineTable({
        enquiringId: v.string(),
        customerId: v.id("customers"),
        contactPersonId: v.optional(v.id("customerContacts")),
        enquiryDate: v.string(),
        productDescription: v.string(),
        quantity: v.number(),
        expectedDeliveryDate: v.optional(v.string()),
        assignedTo: v.optional(v.id("salesPersons")),
        status: v.union(v.literal("open"), v.literal("in_progress"), v.literal("closed")),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_enquiry_id", ["enquiringId"]),

    quotations: defineTable({
        quotationId: v.string(),
        quotationNumber: v.string(),
        customerId: v.id("customers"),
        enquiryId: v.id("enquiries"),
        quotationDate: v.string(),
        validityDate: v.string(),
        approvalStatus: v.union(v.literal("pending"), v.literal("approved"), v.literal("rejected")),
        salesPersonId: v.id("salesPersons"),
        lineItems: v.array(v.object({
            itemId: v.id("Items"),
            description: v.optional(v.string()),
            quantity: v.number(),
            unitPrice: v.number(),
            discountPercent: v.optional(v.number()),
            taxApplicable: v.boolean(),
            lineTotal: v.number(),
        })),
        subTotal: v.number(),
        tax: v.number(),
        totalAmount: v.number(),
        customerNotes: v.optional(v.string()),
        paymentTermsId: v.id("paymentTerms"),
        deliveryTermsId: v.id("deliveryTerms"),
        warrantyTermsId: v.id("warrantyTerms"),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_quotation_id", ["quotationId"]),

    salesOrder: defineTable({
        salesOrderId: v.string(),
        salesOrderNumber: v.string(),
        customerPoReference: v.optional(v.string()),
        customerId: v.id("customers"),
        quotationId: v.optional(v.id("quotations")),
        orderDate: v.string(),
        expectedDeliveryDate: v.string(),
        salesPersonId: v.id("salesPersons"),
        lineItems: v.array(v.object({
            itemId: v.id("Items"),
            description: v.optional(v.string()),
            quantity: v.number(),
            unitPrice: v.number(),
            discountPercent: v.optional(v.number()),
            taxApplicable: v.boolean(),
            lineTotal: v.number(),
        })),
        subTotal: v.number(),
        tax: v.number(),
        totalAmount: v.number(),
        customerNotes: v.optional(v.string()),
        paymentTermsId: v.id("paymentTerms"),
        deliveryTermsId: v.id("deliveryTerms"),
        warrantyTermsId: v.id("warrantyTerms"),
        status: v.union(v.literal("pending"), v.literal("confirmed"), v.literal("cancelled")),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_sales_order_id", ["salesOrderId"]),

    sampleDispatch: defineTable({
        sampleDispatchId: v.string(),
        customerId: v.id("customers"),
        itemsId: v.id("Items"),
        purpose: v.string(),
        quantity: v.number(),
        dispatchDate: v.string(),
        expectedReturnDate: v.string(),
        courierDetaails: v.optional(v.string()),
        feedbackDeadline: v.optional(v.string()),
        status: v.union(v.literal("pending"), v.literal("dispatched"), v.literal("returned")),
    }).index("by_sample_dispatch_id", ["sampleDispatchId"]),

    customerCommunications: defineTable({
        communicationId: v.string(),
        customerId: v.id("customers"),
        contactPersonId: v.optional(v.id("customerContacts")),
        communicationDate: v.string(),
        communicationType: v.union(v.literal("email"), v.literal("phone"), v.literal("meeting")),
        subject: v.string(),
        notes: v.optional(v.string()),
        followUpDate: v.optional(v.string()),
        assignedTo: v.id("salesPersons"),
        status: v.union(v.literal("open"), v.literal("closed")),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_communication_id", ["communicationId"]),

    customerFeedback: defineTable({
        feedbackId: v.string(),
        customerId: v.id("customers"),
        itemId: v.optional(v.id("Items")),
        feedbackDate: v.string(),
        feedbackType: v.union(v.literal("product_quality"), v.literal("service_quality"), v.literal("delivery")),
        salesPersonId: v.id("salesPersons"),
        actionTakens: v.optional(v.string()),
        followUpStatus: v.union(v.literal("pending"), v.literal("completed")),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_feedback_id", ["feedbackId"]),

    rateRevisions: defineTable({
        rateRevisionId: v.string(),
        customerId: v.id("customers"),
        itemId: v.id("Items"),
        perviousPrice: v.number(),
        revisedPrice: v.number(),
        revisionReason: v.string(),
        revisionDate: v.string(),
        revisedBy: v.id("salesPersons"),
        status: v.union(v.literal("pending"), v.literal("approved"), v.literal("rejected")),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_rate_revision_id", ["rateRevisionId"]),

    orderSchedule: defineTable({
        scheduleId: v.string(),
        salesOrderId: v.id("salesOrder"),
        itemId: v.id("Items"),
        scheduledDate: v.string(),
        quantity: v.number(),
        pendingQuamtity: v.number(),
        status: v.union(v.literal("scheduled"), v.literal("delivered"), v.literal("cancelled")),
        createdAt: v.number(),
        updatedAt: v.number(),
    }).index("by_schedule_id", ["scheduleId"]),
});
